From 3117e3f1f1bc5c99942fc17c6c1af62622322e6c Mon Sep 17 00:00:00 2001
From: Jocelyn Turcotte <turcotte.j@gmail.com>
Date: Sun, 27 Jul 2014 17:10:46 +0200
Subject: [PATCH] Cheap HTTP resource fetching support

---
 src/websockets/qwebsocket.cpp                 |  6 ++++
 src/websockets/qwebsocket.h                   |  2 ++
 src/websockets/qwebsocket_p.cpp               |  1 +
 src/websockets/qwebsocket_p.h                 |  3 ++
 src/websockets/qwebsockethandshakerequest.cpp | 46 +++++++++++++++++++--------
 src/websockets/qwebsockethandshakerequest_p.h |  4 +++
 src/websockets/qwebsocketserver.h             |  2 ++
 src/websockets/qwebsocketserver_p.cpp         | 21 ++++++++++--
 8 files changed, 70 insertions(+), 15 deletions(-)

diff --git a/src/websockets/qwebsocket.cpp b/src/websockets/qwebsocket.cpp
index f53d3d7..33d5d09 100644
--- a/src/websockets/qwebsocket.cpp
+++ b/src/websockets/qwebsocket.cpp
@@ -634,6 +634,12 @@ void QWebSocket::setProxy(const QNetworkProxy &networkProxy)
 }
 #endif
 
+QList<QNetworkCookie> QWebSocket::cookies() const
+{
+    Q_D(const QWebSocket);
+    return d->cookies();
+}
+
 /*!
     Sets the generator to use for creating masks to \a maskGenerator.
     The default QWebSocket generator can be reset by supplying a \e Q_NULLPTR.
diff --git a/src/websockets/qwebsocket.h b/src/websockets/qwebsocket.h
index 77d3973..e72ee8c 100644
--- a/src/websockets/qwebsocket.h
+++ b/src/websockets/qwebsocket.h
@@ -44,6 +44,7 @@
 
 #include <QtCore/QUrl>
 #include <QtNetwork/QAbstractSocket>
+#include <QtNetwork/QNetworkCookie>
 #ifndef QT_NO_NETWORKPROXY
 #include <QtNetwork/QNetworkProxy>
 #endif
@@ -87,6 +88,7 @@ public:
     QNetworkProxy proxy() const;
     void setProxy(const QNetworkProxy &networkProxy);
 #endif
+    QList<QNetworkCookie> cookies() const;
     void setMaskGenerator(const QMaskGenerator *maskGenerator);
     const QMaskGenerator *maskGenerator() const;
     qint64 readBufferSize() const;
diff --git a/src/websockets/qwebsocket_p.cpp b/src/websockets/qwebsocket_p.cpp
index a334db1..2891cb0 100644
--- a/src/websockets/qwebsocket_p.cpp
+++ b/src/websockets/qwebsocket_p.cpp
@@ -292,6 +292,7 @@ QWebSocket *QWebSocketPrivate::upgradeFrom(QTcpSocket *pTcpSocket,
         pWebSocket->d_func()->setRequestUrl(request.requestUrl());
         pWebSocket->d_func()->setProtocol(response.acceptedProtocol());
         pWebSocket->d_func()->setResourceName(request.requestUrl().toString(QUrl::RemoveUserInfo));
+        pWebSocket->d_func()->setCookies(QNetworkCookie::parseCookies(request.headers().value("Cookie").toLocal8Bit()));
         //a server should not send masked frames
         pWebSocket->d_func()->enableMasking(false);
     }
diff --git a/src/websockets/qwebsocket_p.h b/src/websockets/qwebsocket_p.h
index 5c65450..285c8f5 100644
--- a/src/websockets/qwebsocket_p.h
+++ b/src/websockets/qwebsocket_p.h
@@ -124,6 +124,8 @@ public:
     QNetworkProxy proxy() const;
     void setProxy(const QNetworkProxy &networkProxy);
 #endif
+    QList<QNetworkCookie> cookies() const { return m_cookies; }
+    void setCookies(const QList<QNetworkCookie> &cookies) { m_cookies = cookies; }
     void setMaskGenerator(const QMaskGenerator *maskGenerator);
     const QMaskGenerator *maskGenerator() const;
     qint64 readBufferSize() const;
@@ -232,6 +234,7 @@ private:
     QMaskGenerator *m_pMaskGenerator;
     QDefaultMaskGenerator m_defaultMaskGenerator;
 
+    QList<QNetworkCookie> m_cookies;
     friend class QWebSocketServerPrivate;
 };
 
diff --git a/src/websockets/qwebsockethandshakerequest.cpp b/src/websockets/qwebsockethandshakerequest.cpp
index d217849..45548f4 100644
--- a/src/websockets/qwebsockethandshakerequest.cpp
+++ b/src/websockets/qwebsockethandshakerequest.cpp
@@ -61,6 +61,7 @@ QWebSocketHandshakeRequest::QWebSocketHandshakeRequest(int port, bool isSecure)
     m_port(port),
     m_isSecure(isSecure),
     m_isValid(false),
+    m_isWebSocket(false),
     m_headers(),
     m_versions(),
     m_key(),
@@ -85,6 +86,7 @@ QWebSocketHandshakeRequest::~QWebSocketHandshakeRequest()
 void QWebSocketHandshakeRequest::clear()
 {
     m_isValid = false;
+    m_isWebSocket = false;
     m_headers.clear();
     m_versions.clear();
     m_key.clear();
@@ -118,6 +120,11 @@ bool QWebSocketHandshakeRequest::isValid() const
     return m_isValid;
 }
 
+bool QWebSocketHandshakeRequest::isWebSocket() const
+{
+    return m_isWebSocket;
+}
+
 /*!
     \internal
  */
@@ -185,6 +192,14 @@ QList<QString> QWebSocketHandshakeRequest::extensions() const
 /*!
     \internal
  */
+QString QWebSocketHandshakeRequest::method() const
+{
+    return m_method;
+}
+
+/*!
+    \internal
+ */
 QUrl QWebSocketHandshakeRequest::requestUrl() const
 {
     return m_requestUrl;
@@ -231,13 +246,6 @@ void QWebSocketHandshakeRequest::readHandshake(QTextStream &textStream)
     }
 
     const QString host = m_headers.value(QStringLiteral("Host"), QString());
-    m_requestUrl = QUrl::fromEncoded(resourceName.toLatin1());
-    if (m_requestUrl.isRelative())
-        m_requestUrl.setHost(host);
-    if (m_requestUrl.scheme().isEmpty()) {
-        const QString scheme =  isSecure() ? QStringLiteral("wss") : QStringLiteral("ws");
-        m_requestUrl.setScheme(scheme);
-    }
 
     const QStringList versionLines = m_headers.values(QStringLiteral("Sec-WebSocket-Version"));
     for (QStringList::const_iterator v = versionLines.begin(); v != versionLines.end(); ++v) {
@@ -287,12 +295,24 @@ void QWebSocketHandshakeRequest::readHandshake(QTextStream &textStream)
 
     m_isValid = !(host.isEmpty() ||
                   resourceName.isEmpty() ||
-                  m_versions.isEmpty() ||
-                  m_key.isEmpty() ||
-                  (verb != QStringLiteral("GET")) ||
-                  (!conversionOk || (httpVersion < 1.1f)) ||
-                  (upgrade.toLower() != QStringLiteral("websocket")) ||
-                  (!connectionValues.contains(QStringLiteral("upgrade"), Qt::CaseInsensitive)));
+                  (!conversionOk || (httpVersion < 1.1f)));
+    m_isWebSocket = !m_versions.isEmpty() &&
+                    !m_key.isEmpty() &&
+                    verb == QStringLiteral("GET") &&
+                    upgrade.toLower() == QStringLiteral("websocket") &&
+                    connectionValues.contains(QStringLiteral("upgrade"), Qt::CaseInsensitive);
+
+    m_method = verb;
+    m_requestUrl = QUrl::fromEncoded(resourceName.toLatin1());
+    if (m_requestUrl.isRelative())
+        m_requestUrl.setHost(host);
+    if (m_requestUrl.scheme().isEmpty()) {
+        if (m_isWebSocket)
+            m_requestUrl.setScheme(isSecure() ? QStringLiteral("wss") : QStringLiteral("ws"));
+        else
+            m_requestUrl.setScheme(isSecure() ? QStringLiteral("https") : QStringLiteral("http"));
+    }
+
     if (Q_UNLIKELY(!m_isValid))
         clear();
 }
diff --git a/src/websockets/qwebsockethandshakerequest_p.h b/src/websockets/qwebsockethandshakerequest_p.h
index 920cc07..25198bd 100644
--- a/src/websockets/qwebsockethandshakerequest_p.h
+++ b/src/websockets/qwebsockethandshakerequest_p.h
@@ -76,12 +76,14 @@ public:
     int port() const;
     bool isSecure() const;
     bool isValid() const;
+    bool isWebSocket() const;
     QMap<QString, QString> headers() const;
     QList<QWebSocketProtocol::Version> versions() const;
     QString key() const;
     QString origin() const;
     QList<QString> protocols() const;
     QList<QString> extensions() const;
+    QString method() const;
     QUrl requestUrl() const;
     QString resourceName() const;
     QString host() const;
@@ -93,12 +95,14 @@ private:
     int m_port;
     bool m_isSecure;
     bool m_isValid;
+    bool m_isWebSocket;
     QMap<QString, QString> m_headers;
     QList<QWebSocketProtocol::Version> m_versions;
     QString m_key;
     QString m_origin;
     QList<QString> m_protocols;
     QList<QString> m_extensions;
+    QString m_method;
     QUrl m_requestUrl;
 };
 
diff --git a/src/websockets/qwebsocketserver.h b/src/websockets/qwebsocketserver.h
index 90e149f..11254eb 100644
--- a/src/websockets/qwebsocketserver.h
+++ b/src/websockets/qwebsocketserver.h
@@ -56,6 +56,7 @@
 
 QT_BEGIN_NAMESPACE
 
+class QNetworkRequest;
 class QWebSocketServerPrivate;
 class QWebSocket;
 class QWebSocketCorsAuthenticator;
@@ -121,6 +122,7 @@ public:
     QList<QWebSocketProtocol::Version> supportedVersions() const;
 
 Q_SIGNALS:
+    void normalHttpRequest(const QByteArray &method, const QNetworkRequest &request, const QByteArray &body, QTcpSocket *connection);
     void acceptError(QAbstractSocket::SocketError socketError);
     void serverError(QWebSocketProtocol::CloseCode closeCode);
     //TODO: should use a delegate iso of a synchronous signal
diff --git a/src/websockets/qwebsocketserver_p.cpp b/src/websockets/qwebsocketserver_p.cpp
index 17cb565..9d3c4e6 100644
--- a/src/websockets/qwebsocketserver_p.cpp
+++ b/src/websockets/qwebsocketserver_p.cpp
@@ -54,6 +54,7 @@
 #include <QtNetwork/QTcpServer>
 #include <QtNetwork/QTcpSocket>
 #include <QtNetwork/QNetworkProxy>
+#include <QtNetwork/QNetworkRequest>
 
 QT_BEGIN_NAMESPACE
 
@@ -441,7 +442,7 @@ void QWebSocketServerPrivate::handshakeReceived()
     QTextStream textStream(pTcpSocket);
     request.readHandshake(textStream);
 
-    if (request.isValid()) {
+    if (request.isWebSocket()) {
         QWebSocketCorsAuthenticator corsAuthenticator(request.origin());
         Q_EMIT q->originAuthenticationRequired(&corsAuthenticator);
 
@@ -478,7 +479,23 @@ void QWebSocketServerPrivate::handshakeReceived()
                      QWebSocketServer::tr("Invalid response received."));
         }
     }
-    if (!success) {
+    if (success)
+        return;
+
+    if (request.isValid()) {
+        QNetworkRequest httpRequest(request.requestUrl());
+        QMap<QString, QString> headers = request.headers();
+        QMap<QString, QString>::const_iterator end = headers.constEnd();
+        for (QMap<QString, QString>::const_iterator i = headers.constBegin(); i != end; ++i)
+            httpRequest.setRawHeader(i.key().toLocal8Bit(), i.value().toLocal8Bit());
+
+        // FIXME: The QByteArray->QString->QByteArray conversion should be avoided.
+        QByteArray body = textStream.read(httpRequest.header(QNetworkRequest::ContentLengthHeader).toLongLong()).toLocal8Bit();
+        emit q->normalHttpRequest(request.method().toLocal8Bit(), httpRequest, body, pTcpSocket);
+
+        // FIXME: Signals make the fallback shitty, a virtual instead? Pass it in a sharedptr?
+        // pTcpSocket->close();
+    } else {
         pTcpSocket->close();
     }
 }
-- 
1.8.4.2

